package com.nripenTestApp;

import java.sql.SQLException;
import java.util.Properties;

import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.stereotype.Service;

@Service
public class ServiceClass2 {
	@Autowired
	 public SimpleMailMessage template;
	@Autowired
	public EmailServiceImpl emailServiceImpl;
	
	public String helloService() {
		return "Hello! This is from java spring boot application - ServiceClass2";
	}

	public void sendEmail1() {
	
		// email ID of Recipient.
		String recipient = "nripensarkar86@gmail.com";

		// email ID of Sender.
		String sender = "nripen86@gmail.com";

		// using host as localhost
//		String host = "localhost";
		String host = "smtp.gmail.com";

		// Getting system properties
		Properties properties = System.getProperties();

		// Setting up mail server
		properties.setProperty("mail.smtp.host", host);
		properties.setProperty("mail.smtp.auth", "true");
		properties.setProperty("mail.smtp.starttls.enable", "true");
		properties.setProperty("mail.smtp.port", "587");

		// creating session object to get properties
		Session session = Session.getDefaultInstance(properties);

		try
		{
			// MimeMessage object.
			MimeMessage message = new MimeMessage(session);

			// Set From Field: adding senders email to from field.
			message.setFrom(new InternetAddress(sender));

			// Set To Field: adding recipient's email to from field.
			message.addRecipient(Message.RecipientType.TO, new InternetAddress(recipient));

			// Set Subject: subject of the email
			message.setSubject("This is Suject");

			// set body of the email.
			message.setText("This is a test mail");

			// Send email.
			Transport.send(message);
			System.out.println("Mail successfully sent");
		}
		catch (MessagingException mex)
		{
			mex.printStackTrace();
		}
	}

	public void sendEmail2() {
		String host="smtp.gmail.com";
		  final String user=CredProvider.emailId;//change accordingly
		  final String password=CredProvider.emailpwd;//change accordingly
		//Get the session object
		   Properties props = new Properties();
		   props.put("mail.smtp.host",host);
		   props.put("mail.smtp.auth", "true");
//		   props.setProperty("mail.smtp.host", host);
//		   props.setProperty("mail.smtp.auth", "true");
//		   props.put("mail.smtp.starttls.enable", "true");
		   props.put("mail.smtp.port", "587");
		   props.put("mail.smtp.ssl.trust", "smtp.gmail.com");
		   props.put("mail.smtp.starttls.enable","false");
		   props.put("mail.transport.protocol","smtp");
		   props.put("mail.smtp.ssl.enable","true");
		  
		  String to="nripensarkar86@gmail.com";//change accordingly

		   
		   
		   Session session = Session.getInstance(props,
		    new Authenticator() {
			   @Override
		      protected PasswordAuthentication getPasswordAuthentication() {
			return new PasswordAuthentication(user,password);
		      }
		    });

		   //Compose the message
		    try {
		     MimeMessage message = new MimeMessage(session);
		     message.setFrom(new InternetAddress(user));
		     message.setRecipient(Message.RecipientType.TO,new InternetAddress(to));
//		     message.addRecipient(Message.RecipientType.TO,new InternetAddress(to));
		     message.setSubject("nripen Azure function email test");
		     message.setText("This is simple program of sending email.");
		     
		    //send the message
		     Transport.send(message);

		     System.out.println("message sent successfully...");
		 
		     } catch (MessagingException e) {e.printStackTrace();}
		 }
	
	public void sendEmail3() throws MessagingException {
		String to = "reciveremail@xxxx.xxx";
	    String subject = "subject";
	    String msg ="email text....";
	    final String from =CredProvider.emailId;
	    final  String password =CredProvider.emailpwd;


	    Properties props = new Properties();  
	    props.setProperty("mail.transport.protocol", "smtp");     
	    props.setProperty("mail.host", "smtp.gmail.com");  
	    props.put("mail.smtp.auth", "true");  
	    props.put("mail.smtp.port", "587");  
	    props.put("mail.debug", "true");  
	    props.put("mail.smtp.socketFactory.port", "587");  
	    props.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");  
	    props.put("mail.smtp.socketFactory.fallback", "false");  
	    Session session = Session.getDefaultInstance(props,  
	    new javax.mail.Authenticator() {
	       protected PasswordAuthentication getPasswordAuthentication() {  
	       return new PasswordAuthentication(from,password);  
	   }  
	   });  

	   //session.setDebug(true);  
	   Transport transport = session.getTransport();  
	   InternetAddress addressFrom = new InternetAddress(from);  

	   MimeMessage message = new MimeMessage(session);  
	   message.setSender(addressFrom);  
	   message.setSubject(subject);  
	   message.setContent(msg, "text/plain");  
	   message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));  

	   transport.connect();  
	   Transport.send(message);  
	   transport.close();
	   } 
	
	public void sendEmail() throws SQLException {
//		String text = String.format(template.getText(), templateArgs);
		if (emailServiceImpl == null) {
		emailServiceImpl = new EmailServiceImpl();
		}
		if (template == null) {
			template = emailServiceImpl.templateSimpleMessage();
		}
		emailServiceImpl.sendSimpleMessage("nripensarkar86@gmail.com", "TestAzureFunction: Automated email", template.getText());
	}

}
